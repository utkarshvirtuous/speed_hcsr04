/* HC-SR04 Sensor
   https://www.dealextreme.com/p/hc-sr04-ultrasonic-sensor-distance-measuring-module-133696
  
   This sketch reads a HC-SR04 ultrasonic rangefinder and returns the
   distance to the closest object in range. To do this, it sends a pulse
   to the sensor to initiate a reading, then listens for a pulse 
   to return.  The length of the returning pulse is proportional to 
   the distance of the object from the sensor.
     
   The circuit:
  * VCC connection of the sensor attached to +5V
  * GND connection of the sensor attached to ground
  * TRIG connection of the sensor attached to digital pin 2
  * ECHO connection of the sensor attached to digital pin 4
   Original code for Ping))) example was created by David A. Mellis
   Adapted for HC-SR04 by Tautvidas Sipavicius
   This example code is in the public domain.
  * Further modified(to a great extent) for speedometer by Utkarsh
 
 */


const int trigPin = 2;
const int echoPin = 4;

void setup() {
  // initialize serial communication:
  Serial.begin(9600);
}

void loop()
{
  // establish variables for duration of the ping, 
  // and the distance result in inches and centimeters:
  long duration,duration2, inches, cm = 99,cm2 = 99;
  uint32_t ts1,ts2;
  float speed12 = 0,param = 150;

  // The sensor is triggered by a HIGH pulse of 10 or more microseconds.
  // Give a short LOW qpulse beforehand to ensure a clean HIGH pulse:
  //uint32_t ts1 = millis();
  // ...TASK TO BE MEASURED GOES HERE
  while(cm>=20){
  pinMode(trigPin, OUTPUT);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read the signal from the sensor: a HIGH pulse whose
  // duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.
  pinMode(echoPin, INPUT);
  duration = pulseIn(echoPin, HIGH);

  // convert the time into a distance
  inches = microsecondsToInches(duration);
  cm = microsecondsToCentimeters(duration);
  }
  //Serial.print(inches);
  //Serial.print("in, ");
  { Serial.println(); 
    Serial.print("cm : ");
    Serial.print(cm);
    ts1 = millis();
    Serial.print("Time : ");
    Serial.print(ts1);
    while(cm2>=20){
    pinMode(8, OUTPUT);
    digitalWrite(8, LOW);
    delayMicroseconds(2);
    digitalWrite(8, HIGH);
    delayMicroseconds(10);
    digitalWrite(8, LOW);
    pinMode(10, INPUT);
    duration2 = pulseIn(10, HIGH);
    cm2 = microsecondsToCentimeters(duration2);
    }
    ts2 = millis();
    Serial.println();
    Serial.print("cm2 : ");
    Serial.print(cm2);
    Serial.print("Time : ");
    Serial.print(ts2);
    float billu = ts2 - ts1;
    if(billu<3){
    Serial.println();
    }
    else
    {speed12 = param/billu;
    Serial.println();
    Serial.print(speed12);}
    /*while(1){
      delay(1);
      if(cm2<=20){
        ts2 = millis();
        Serial.println(ts2-ts1);
        Serial.println();
        Serial.println();
        break;  
      }  
      else{
        
      }
    }*/
    /*while(cm2>=20){
      }
    Serial.print(cm);  
    ts2 = millis();
    Serial.println(ts2-ts1);
    Serial.println();*/
    }
    
  
  
  delay(2000);
}

long microsecondsToInches(long microseconds)
{
  // According to Parallax's datasheet for the PING))), there are
  // 73.746 microseconds per inch (i.e. sound travels at 1130 feet per
  // second).  This gives the distance travelled by the ping, outbound
  // and return, so we divide by 2 to get the distance of the obstacle.
  // See: http://www.parallax.com/dl/docs/prod/acc/28015-PING-v1.3.pdf
  return microseconds / 74 / 2;
}

long microsecondsToCentimeters(long microseconds)
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the
  // object we take half of the distance travelled.
  return microseconds / 29 / 2;
}
